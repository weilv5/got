package com.jsict.biz.controller;

import com.jsict.biz.model.Role;
import com.jsict.biz.model.TreeNode;
import com.jsict.biz.model.UdpPointPermission;
import com.jsict.biz.service.RoleService;
import com.jsict.biz.service.UdpPointPermissionService;
import com.jsict.framework.core.controller.AbstractGenericController;
import com.jsict.framework.core.controller.CSRFTokenManager;
import com.jsict.framework.core.controller.Response;
import com.jsict.framework.utils.JsonUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

/**
 * Auto-Generated by UDP Generator
 * <p>
 * 继承<code>com.jsict.framework.core.controller.AbstractGenericController</code>，封装通用的CRUD方法<br>
 * 可重写相关方法实现自定义CRUD的操作<br>
 * 可参考<a href="http://10.1.159.16/udp/unified_development_platform/blob/5.0-alpha/framework/src/main/java/com/jsict/framework/core/controller/AbstractGenericController.java">AbstractGenericController.java</a>
 */
@Controller
@RequestMapping("pointpermission")
public class UdpPointPermissionController extends AbstractGenericController<UdpPointPermission, String, UdpPointPermission> {
    private static final Logger logger = LoggerFactory.getLogger(UdpPointPermissionController.class);
    /**
     * 示例代码
     *
     * @Override
     * @RequestMapping(value = "/save", method = RequestMethod.POST, produces = "application/json")
     * @ResponseBody public Response save(@ModelAttribute UdpPointPermission entity, @RequestParam(value = CSRFTokenManager.CSRF_PARAM_NAME) String paramToken, HttpServletRequest request){
     * return super.save(entity, paramToken, request);
     * }
     */

    @Autowired
    RoleService roleService;

    @Autowired
    UdpPointPermissionService udpPointPermissionService;

    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = "application/json")
    @ResponseBody
    public Response update(@ModelAttribute UdpPointPermission entity, @RequestParam(value = CSRFTokenManager.CSRF_PARAM_NAME) String paramToken, HttpServletRequest request){
        Response response;
        try {
            List<Role> roleList = udpPointPermissionService.get(entity.getId()).getRoleList();
            entity.setRoleList(roleList);
            udpPointPermissionService.update(entity);
            response = new Response(0);
        }catch (Exception e){
            logger.debug(e.getMessage(),e);
            response = new Response(-1, e.getMessage());
        }
        return response;
    }

    @RequestMapping(value = "/roleConfig", method = RequestMethod.GET, produces = "application/json")
    public ModelAndView roleConfig(@RequestParam String id) {
        UdpPointPermission udpPointPermission = udpPointPermissionService.get(id);
        List<Role> pointRoleList = udpPointPermission.getRoleList();
        List<Role> linkedList = new LinkedList<>(pointRoleList);
        String controllerMapping = this.getClass().getAnnotation(RequestMapping.class).value()[0];
        List<Role> roleList = roleService.selectAll();

        ModelAndView mav = new ModelAndView(controllerMapping + "/config");
        mav.addObject("id", id);
        List<TreeNode> nodes = new ArrayList<>();
        roleList.forEach(role -> {
            TreeNode treeNode = new TreeNode();
            treeNode.setText(role.getRoleName());
            treeNode.setModuleId(role.getId());
            treeNode.setPid(null == role.getParentRoleId() ? null : role.getParentRoleId());
            treeNode.setOpen(true);
            if (linkedList.contains(role))
                treeNode.setChecked(true);
            nodes.add(treeNode);
        });
        String treeNode = JsonUtil.parseListToJson(nodes);
        mav.addObject("treeNode", treeNode);
        return mav;
    }

    @ResponseBody
    @RequestMapping(value = "/saveConfig", method = RequestMethod.POST)
    public Response saveConfig(@RequestParam String id, @RequestParam("roleIds[]") List<String> roleIds) {
        Response response;
        try {
            UdpPointPermission udpPointPermission = udpPointPermissionService.get(id);
            List<Role> roleList = new ArrayList<>();
            roleIds.forEach(roleId -> {
                Role role = roleService.get(roleId);
                roleList.add(role);
            });
            udpPointPermission.setRoleList(roleList);
            udpPointPermissionService.update(udpPointPermission);
            response = new Response(0);
        } catch (Exception e) {
            response = new Response(-1, e.getMessage());
            logger.error("请求失败",e);
        }
        return response;

    }


}