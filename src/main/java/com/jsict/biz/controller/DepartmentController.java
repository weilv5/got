package com.jsict.biz.controller;

import com.jsict.biz.model.DepartmentQuery;
import com.jsict.biz.model.Role;
import com.jsict.biz.model.User;
import com.jsict.biz.service.DepartmentService;
import com.jsict.framework.core.controller.AbstractGenericController;
import com.jsict.biz.model.Department;

import com.jsict.framework.core.controller.LayUIPageResponse;
import com.jsict.framework.core.controller.Response;
import com.jsict.framework.core.controller.RestControllerException;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.SecurityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import java.util.ArrayList;
import java.util.List;

/**
 * Auto-Generated by UDP Generator
 */
@Controller
@RequestMapping("/dept")
public class DepartmentController extends
        AbstractGenericController<Department, String, DepartmentQuery> {

    @Autowired
    private DepartmentService departmentService;
    @Autowired
    private DepartmentService departmentServices;
    private static final Logger logger = LoggerFactory.getLogger(DepartmentController.class);
    protected static final Integer HASCHILD = 2;



    @RequestMapping(value = "deptTree",method = RequestMethod.POST,produces = "application/json")
    @ResponseBody
    public List<Department> deptTree(){
        return departmentService.findAll();
    }


    @Override
    @RequestMapping(value = "/page", method = RequestMethod.POST, produces = "application/json")
    @ResponseBody
    public Page<Department> page(@ModelAttribute DepartmentQuery query, @PageableDefault Pageable pageable){
        try{
            User user = (User) SecurityUtils.getSubject().getPrincipal();
            if(user.isAdmin() || StringUtils.isNotBlank(query.getParentDeptId()))
                return generiService.findByPage(query, pageable);
            else{
                List<Department> departmentList = new ArrayList<>();
                departmentList.add(user.getDepartment());
                List<Department> departments = user.getDeptList();
                departmentList.addAll(departments);
                return new PageImpl<>(departmentList, pageable, departmentList.size());
            }
        }catch(Exception e){
            logger.error("翻页查询出错", e);
            throw new RestControllerException("翻页查询出错", e);
        }
    }

    @RequestMapping(value = "/layUIPages", method = RequestMethod.POST, produces = "application/json")
    @ResponseBody
    public LayUIPageResponse<Department> layUIPage(@ModelAttribute Department query, @PageableDefault Pageable pageable){
        try{
            Page<Department> page = generiService.findByPage(query, pageable);
            List<Department> list = page.getContent();
            if(query.getParentDeptId()==null) {
                for (Department entity : list) {
                    generiService.translateByDic(entity);
                }
            }else{
                Department department = departmentService.get(query.getParentDeptId());
                for (Department entity : list) {
                    entity.setParentDept(department);
                    generiService.translateByDic(entity);
                }
            }
            return new LayUIPageResponse<Department>("0","查询成功", page.getTotalElements(), list);
        }catch(Exception e){
            logger.error("翻页查询出错", e);
            return  new LayUIPageResponse("-1", e.getMessage() , null, null);
        }
    }

    @ResponseBody
    @RequestMapping(value = "/enable", method = RequestMethod.POST)
    public Response enable(@RequestParam String id){
        try{
            ((DepartmentService)generiService).enable(id);
            return new Response(0);
        }catch(Exception e){
            logger.debug("激活部门出错", e);
            return new Response(-1, e.getMessage());
        }
    }

    @ResponseBody
    @RequestMapping(value = "/disable", method = RequestMethod.POST)
    public Response disable(@RequestParam String id){
        try{
            ((DepartmentService)generiService).disable(id);
            return new Response(0);
        }catch(Exception e){
            logger.debug("禁用部门出错", e);
            return new Response(-1, e.getMessage());
        }
    }
    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = "application/json")
    @ResponseBody
    public Response delete(@RequestParam List<String> ids){
        Response response;
        List<Department> depts = new ArrayList<>();
        try{
            for(String id :ids){
                if(!id.equals(""))
                    depts.add(departmentService.get(id));
            }
            boolean isSuccess = departmentService.batchDelete(depts);
            if(isSuccess)
                response = new Response(SUCCESS);
            else
                response = new Response(ERROR, NO_ENTITY);
        }catch(Exception e){
            logger.error(e.getLocalizedMessage(), e);
            response = new Response(ERROR, e.getLocalizedMessage());
        }
        return response;
    }
    @RequestMapping(value = "/checkHasChild", method = RequestMethod.POST, produces = "application/json")
    @ResponseBody
    public Response checkHasChild(@RequestParam List<String> ids){
        Response response;
        boolean hasChild = false;
        try{
            for(String id :ids){
                if(!id.equals("")) {
                    Department d = departmentService.get(id);
                    if (departmentService.findByParentDeptId(d.getId()).size() != 0)
                        hasChild = true;
                }
            }
            if(!hasChild)
                response = new Response(SUCCESS);
            else{
                response = new Response(HASCHILD);
            }
        }catch(Exception e){
            logger.error(e.getLocalizedMessage(), e);
            response = new Response(ERROR, e.getLocalizedMessage());
        }
        return response;
    }

    /**
     * 获取部门的角色信息
     * @param id
     * @return
     */
    @RequestMapping(
            value = {"/roles/{id}"},
            method = {RequestMethod.GET},
            produces = {"application/json"}
    )
    @ResponseBody
    public List<Role> getRoles(@PathVariable String id){
        Department department = departmentService.get(id);
        return department.getDeptRoleList();
    }

    /**
     * 获取父部门信息
     * @param id
     * @return
     */
    @RequestMapping(
            value = {"/parentDept/{id}"},
            method = {RequestMethod.GET},
            produces = {"application/json"}
    )
    @ResponseBody
    public Department getParentDept(@PathVariable String id){
        return departmentService.get(id);
    }
}
