package com.jsict.biz.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jsict.biz.model.DataDictionary;
import com.jsict.biz.service.DataDictionaryService;
import com.jsict.framework.core.controller.AbstractGenericController;
import com.jsict.framework.core.controller.Response;
import com.jsict.framework.filter.EscapeScriptwrapper;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.shiro.web.servlet.ShiroHttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Auto-Generated by UDP Generator
 */
@Controller
@RequestMapping("/dictionary")
public class DataDictionaryController extends AbstractGenericController<DataDictionary, String, DataDictionary> {
    private static final Logger logger = LoggerFactory.getLogger(DataDictionaryController.class);

    @Autowired
    DataDictionaryService dataDictionaryService;

    @RequestMapping(value = "/excelImport", method = RequestMethod.POST, produces = "application/json")
    @ResponseBody
    public Response excelImport(HttpServletRequest request) {
        EscapeScriptwrapper escapeScriptwrapper = (EscapeScriptwrapper) ((ShiroHttpServletRequest) request).getRequest();
        MultipartHttpServletRequest multipartReq = (MultipartHttpServletRequest) escapeScriptwrapper.getOrigRequest();
        Map<String, MultipartFile> fileMap = multipartReq.getFileMap();
        for (Map.Entry<String, MultipartFile> me : fileMap.entrySet()) {
            MultipartFile multipartFile = me.getValue();
            Workbook wb = null;
            String[] split = multipartFile.getOriginalFilename().split("\\.");
            try {
                if ("xls".equals(split[1])) {
                    wb = new HSSFWorkbook(multipartFile.getInputStream());
                } else if ("xlsx".equals(split[1])) {
                    wb = new XSSFWorkbook(multipartFile.getInputStream());
                }

                if (wb != null) {
                    Sheet sheet = wb.getSheetAt(0);
                    int firstRowIndex = sheet.getFirstRowNum();
                    int lastRowIndex = sheet.getLastRowNum();
                    List<Map<String, Object>> list = new ArrayList<>();
                    for (int rIndex = firstRowIndex; rIndex <= lastRowIndex; rIndex++) {
                        Row row = sheet.getRow(rIndex);
                        if (row != null) {
                            Map<String, Object> map = new HashMap<>();
                            Cell keyCell = row.getCell(0);
                            Cell valueCell = row.getCell(1);
                            DecimalFormat decimalFormat = new DecimalFormat("###################.###########");
                            map.put("key", decimalFormat.format(Double.valueOf(keyCell.toString())));
                            map.put("value", valueCell.toString());
                            list.add(map);
                        }
                    }


                    String id = request.getParameter("id");
                    DataDictionary dataDictionary = dataDictionaryService.get(id);
                    ObjectMapper mapper = new ObjectMapper();
                    dataDictionary.setContent(mapper.writeValueAsString(list));
                    dataDictionaryService.update(dataDictionary);
                }

            } catch (Exception e) {
                logger.error("导入异常，请检查文件！", e);
                return new Response(ERROR, "导入异常，请检查文件！");
            }
        }
        return new Response(SUCCESS);
    }
}