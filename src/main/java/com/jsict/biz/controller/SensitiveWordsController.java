package com.jsict.biz.controller;

import com.jsict.framework.core.controller.AbstractGenericController;
import com.jsict.biz.model.SensitiveWords;

import com.jsict.framework.core.controller.Response;
import com.jsict.framework.core.controller.RestControllerException;
import com.jsict.framework.filter.EscapeScriptwrapper;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.util.EntityUtils;
import org.apache.shiro.web.servlet.ShiroHttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import javax.servlet.http.HttpServletRequest;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Map;

/**
 * Auto-Generated by UDP Generator
 */
@Controller
@RequestMapping("sensitive")
public class SensitiveWordsController extends
    AbstractGenericController<SensitiveWords, String,
    SensitiveWords> {

    private static final Logger logger = LoggerFactory.getLogger(SensitiveWordsController.class);

    @Autowired
    private HttpClient httpClient;

    class ImportResult{
        private Integer success;

        private Integer total;

        private Integer repeated;

        private Integer invalid;

        public ImportResult(Integer success, Integer total, Integer repeated, Integer invalid) {
            this.success = success;
            this.total = total;
            this.repeated = repeated;
            this.invalid = invalid;
        }

        public Integer getSuccess() {
            return success;
        }

        public void setSuccess(Integer success) {
            this.success = success;
        }

        public Integer getTotal() {
            return total;
        }

        public void setTotal(Integer total) {
            this.total = total;
        }

        public Integer getRepeated() {
            return repeated;
        }

        public void setRepeated(Integer repeated) {
            this.repeated = repeated;
        }

        public Integer getInvalid() {
            return invalid;
        }

        public void setInvalid(Integer invalid) {
            this.invalid = invalid;
        }

        @Override
        public String toString(){
            StringBuilder sb = new StringBuilder("本次共有敏感词");
            sb.append(total).append("个，成功导入");
            sb.append(success).append("个，重复");
            sb.append(repeated).append("个，无效");
            sb.append(invalid).append("个");
            return sb.toString();
        }
    }

    /**
     * 导入敏感词
     *
     * @param request
     * @return
     */
    @RequestMapping(method = RequestMethod.POST, value = "import")
    @ResponseBody
    public Response importSensitiveWords(HttpServletRequest request){
        try{
            EscapeScriptwrapper escapeScriptwrapper = (EscapeScriptwrapper)((ShiroHttpServletRequest)request).getRequest();
            ImportResult importResult = importWords((MultipartHttpServletRequest)escapeScriptwrapper.getOrigRequest());
            return new Response(0, importResult.toString());
        }catch(Exception e){
            logger.debug("导入敏感词出错", e);
            return new Response(-1, e.getMessage());
        }
    }

    /**
     * 导入敏感词
     *
     * @param multipartReq
     * @return
     */
    private ImportResult importWords(MultipartHttpServletRequest multipartReq){
        Integer success = 0;
        Integer total = 0;
        Integer repeated = 0;
        Integer invalid = 0;
        Map<String, MultipartFile> fileMap = multipartReq.getFileMap();
        MultipartFile multipartFile = fileMap.get("sensitiveWords");
        try(InputStream in = multipartFile.getInputStream(); BufferedReader br = new BufferedReader(new InputStreamReader(in))){
            String lineTxt;
            while ((lineTxt = br.readLine()) != null) {
                total++;
                int result = saveSensitiveWords(lineTxt);
                if(result == 1)
                    success++;
                else if(result == 0)
                    repeated++;
                else
                    invalid++;
            }
        }catch(Exception e){
            logger.debug("导入敏感词出错", e);
            throw new RestControllerException(e);
        }
        return new ImportResult(success, total, repeated, invalid);
    }

    @RequestMapping(method = RequestMethod.POST, value = "sync")
    @ResponseBody
    public Response syncSensitiveWords(){
        try{
            String syncUrl = sysConfig.getConfig().getString("sensitive_words_sync_url");
            String syncKey = sysConfig.getConfig().getString("sensitive_words_sync_key");
            String syncValue = sysConfig.getConfig().getString("sensitive_words_sync_value");
            HttpPost httpPost = new HttpPost(syncUrl);
            httpPost.addHeader(syncKey, syncValue);
            HttpResponse response = httpClient.execute(httpPost);
            HttpEntity httpEntity = response.getEntity();
            Integer status = response.getStatusLine().getStatusCode();
            String content = EntityUtils.toString(httpEntity,"UTF-8");
            if(status!=200)
                return new Response(-1, content);
            Integer success = 0;
            Integer total = 0;
            Integer repeated = 0;
            Integer invalid = 0;
            String[] words = content.split("\n");
            for(String word: words){
                total++;
                int result = saveSensitiveWords(word);
                if(result == 1)
                    success++;
                else if(result == 0)
                    repeated++;
                else
                    invalid++;
            }
            ImportResult importResult = new ImportResult(success, total, repeated, invalid);
            return new Response(0, importResult.toString());
        }catch(Exception e){
            logger.debug("导入敏感词出错", e);
            return new Response(-1, e.getMessage());
        }
    }

    private Integer saveSensitiveWords(String words){
        try{
            if(StringUtils.isNotBlank(words)){
                SensitiveWords sensitiveWords = new SensitiveWords();
                sensitiveWords.setWords(words);
                generiService.save(sensitiveWords);
                return 1;
            }else{
                return -1;
            }

        }catch (DataIntegrityViolationException de){
            logger.debug("导入敏感词出错", de);
            return 0;
        }catch(Exception ce){
            logger.debug("导入敏感词出错", ce);
            return -1;
        }
    }

}