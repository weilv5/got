package com.jsict.biz.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.jsict.framework.core.dao.annotation.LogicDel;
import com.jsict.framework.core.dao.annotation.Monitor;
import com.jsict.framework.core.dao.annotation.MonitorType;
import com.jsict.framework.core.dao.hibernate.EntityOperationListener;
import com.jsict.framework.core.model.BaseEntity;
import com.jsict.framework.core.security.model.IRole;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.*;
import org.hibernate.validator.constraints.NotBlank;

import javax.persistence.*;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.validation.constraints.Max;
import java.util.List;


/**
 * Auto-Generated by UDP Generator
 */
@Entity
@LogicDel
@Table(name = "role")
@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@EntityListeners(EntityOperationListener.class)
@Monitor(name = "角色", types = {MonitorType.CREATE, MonitorType.UPDATE, MonitorType.DELETE})
public class Role extends BaseEntity<String> implements IRole{

    /** 排序 */
    @Max(value = 99, message = "排序必须小于99")
    @Column(name = "sort", length = 2)
    private Integer sort;
    /** 上层角色 */
    @Column(name = "parent_role_id", length = 32)
    private String parentRoleId;
    /** 备注 */
    @Column(name = "backup", length = 100)
    private String backup;
    /** 角色名称 */
    @NotBlank(message="角色名称不能为空")
    @Column(name = "role_name", length = 60, nullable = false)
    private String roleName;
    /** 是否管理员角色 */
    @Column(name = "admin", length = 1)
    private Boolean admin;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "parent_role_id", insertable = false, updatable = false)
    private Role parentRole;

    @JsonIgnore
    @ManyToMany
    @LazyCollection(LazyCollectionOption.TRUE)
    @JoinTable(name = "module_in_role",
            joinColumns = {
                    @JoinColumn(name = "role_id")
            },
            inverseJoinColumns = {
                    @JoinColumn(name = "module_id")
            }
    )
    private List<Module> moduleList;


    @JsonIgnore
    @ManyToMany(fetch = FetchType.EAGER)
    @Fetch(value = FetchMode.SUBSELECT)
    @JoinTable(name = "user_in_role",
            joinColumns = {
                    @JoinColumn(name = "role_id")
            },
            inverseJoinColumns = {
                    @JoinColumn(name = "user_id")
            }
    )
    private List<User> userList;

    public Role(){
        //Default Constructor
    }

    public Role(String id, Integer sort, String backup, String roleName, Boolean admin) {
        this.id = id;
        this.sort = sort;
        this.backup = backup;
        this.roleName = roleName;
        this.admin = admin;
    }

    public void setSort(Integer sort){
        this.sort = sort;
    }

    public Integer getSort(){
        return this.sort;
    }
    public void setParentRoleId(String parentRoleId){
        this.parentRoleId = parentRoleId;
    }

    public String getParentRoleId(){
        return this.parentRoleId;
    }
    public void setBackup(String backup){
        this.backup = backup;
    }

    public String getBackup(){
        return this.backup;
    }
    public void setRoleName(String roleName){
        this.roleName = roleName;
    }

    public String getRoleName(){
        return this.roleName;
    }

    public Role getParentRole() {
        return parentRole;
    }

    public void setParentRole(Role parentRole) {
        this.parentRole = parentRole;
    }

    public List<Module> getModuleList() {
        return moduleList;
    }

    public void setModuleList(List<Module> moduleList) {
        this.moduleList = moduleList;
    }

    public List<User> getUserList() {
        return userList;
    }

    public void setUserList(List<User> userList) {
        this.userList = userList;
    }

    public Boolean getAdmin() {
        return admin;
    }

    public void setAdmin(Boolean admin) {
        this.admin = admin;
    }

    @Override
    public boolean equals(Object obj){
        if(obj instanceof Role){
            Role role = (Role)obj;
            if(id != null)
                return getId().equals(role.getId());
            else
                return super.equals(obj);
        }else
            return false;
    }

    @Override
    public int hashCode(){
        if(StringUtils.isNotBlank(id))
            return id.hashCode();
        else
            return super.hashCode();
    }
}