package com.jsict.biz.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.jsict.framework.core.dao.annotation.LogicDel;
import com.jsict.framework.core.dao.annotation.Monitor;
import com.jsict.framework.core.dao.annotation.MonitorType;
import com.jsict.framework.core.dao.hibernate.EntityOperationListener;
import com.jsict.framework.core.model.BaseEntity;
import com.jsict.framework.core.security.model.IDepartment;
import org.hibernate.annotations.*;
import org.hibernate.validator.constraints.NotBlank;

import javax.persistence.*;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.validation.constraints.Max;
import java.util.ArrayList;
import java.util.List;


/**
 * Auto-Generated by UDP Generator
 */
@Entity
@LogicDel
@Table(name = "department")
@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@EntityListeners(EntityOperationListener.class)
@JsonIgnoreProperties(value={"hibernateLazyInitializer","handler","fieldHandler"})
@Monitor(name = "部门", types = {MonitorType.CREATE, MonitorType.UPDATE, MonitorType.DELETE})
public class Department extends BaseEntity<String> implements IDepartment<Department, Role>{

    /** 部门编码 */
    @Column(name = "dept_code", length = 300, nullable = false)
    private String deptCode;
    /** 部门名称 */
    @NotBlank(message="部门名称不能为空")
    @Column(name = "dept_name", length = 100, nullable = false)
    private String deptName;
    /** 排序 */
    @Max(value = 99, message = "排序必须小于99")
    @Column(name = "sort", length = 2)
    private Integer sort;
    /** 上层部门 */
    @Column(name = "parent_dept_id", length = 32)
    private String parentDeptId;

    @Column(name = "enable", length = 1)
    private Integer enable = 1;

    /** 部门所有角色 */
    @JsonIgnore
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "department_in_role",
            joinColumns = {
                    @JoinColumn(name = "dept_id")
            },
            inverseJoinColumns = {
                    @JoinColumn(name = "role_id")
            }
    )
    private List<Role> deptRoleList = new ArrayList<>();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_dept_id", insertable = false, updatable = false)
    private Department parentDept;

    /** 所有子部门 */
    @JsonIgnore
    @OneToMany(cascade = { CascadeType.REFRESH, CascadeType.PERSIST,CascadeType.MERGE, CascadeType.REMOVE },fetch=FetchType.LAZY)
    @Fetch(FetchMode.SELECT)
    @JoinColumn(name = "parent_dept_id", insertable = false, updatable = false)
    private List<Department> childList = new ArrayList<Department>();

    public Department(){
        // default constractor
    }

    public Department(String id){
        this.id = id;
    }

    public Department(String id, String deptCode, String deptName, Integer sort, Integer enable) {
        this.id = id;
        this.deptCode = deptCode;
        this.deptName = deptName;
        this.sort = sort;
        this.enable = enable;
    }

    public List<Department> getChildList() {
        return childList;
    }

    public void setChildList(List<Department> childList) {
        this.childList = childList;
    }


    public void setDeptCode(String deptCode){
        this.deptCode = deptCode;
    }

    public String getDeptCode(){
        return this.deptCode;
    }
    public void setDeptName(String deptName){
        this.deptName = deptName;
    }

    public String getDeptName(){
        return this.deptName;
    }
    public void setParentDeptId(String parentDeptId){
        this.parentDeptId = parentDeptId;
    }

    public String getParentDeptId(){
        return this.parentDeptId;
    }

    @Override
    public Department getParentDept() {
        return parentDept;
    }

    @Override
    public void setParentDept(Department parentDept) {
        this.parentDept = parentDept;
    }

    public Integer getSort() {
        return sort;
    }

    public void setSort(Integer sort) {
        this.sort = sort;
    }

    @Override
    public List<Role> getDeptRoleList() {
        return deptRoleList;
    }

    @Override
    public void setDeptRoleList(List<Role> deptRoleList) {
        this.deptRoleList = deptRoleList;
    }

    public Integer getEnable() {
        return enable;
    }

    public void setEnable(Integer enable) {
        this.enable = enable;
    }
}
