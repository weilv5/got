package com.jsict.biz.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.jsict.framework.core.dao.annotation.Dictionary;
import com.jsict.framework.core.dao.annotation.LogicDel;
import com.jsict.framework.core.dao.annotation.Monitor;
import com.jsict.framework.core.dao.annotation.MonitorType;
import com.jsict.framework.core.model.BaseEntity;
import com.jsict.framework.core.security.model.IUser;
import com.jsict.framework.utils.JsonDateDeSerializer;
import com.jsict.framework.utils.JsonDateSerializer;
import org.apache.commons.lang3.StringUtils;
import org.apache.shiro.authz.AuthorizationInfo;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.NotBlank;

import javax.persistence.*;
import javax.validation.constraints.Max;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Auto-Generated by UDP Generator
 */
@Entity
@LogicDel
@Table(name = "users")
@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Monitor(name = "用户", types = {MonitorType.CREATE, MonitorType.UPDATE, MonitorType.DELETE})
public class User extends BaseEntity<String> implements IUser<Department, Role>{

    /** 密码 */
    @Column(name = "password", length = 30, nullable = false)
    private String password;
    /** 出生日期 */
    @JsonSerialize(using = JsonDateSerializer.class)
    @JsonDeserialize(using = JsonDateDeSerializer.class)
    @Column(name = "birthday", length = 30)
    private Date birthday;
    /** 电子邮箱 */
    @Email(message = "电子邮箱格式错误")
    @Column(name = "email", length = 80)
    private String email;
    /** 部门 */
    @Column(name = "dept_id", length = 32, nullable = false)
    private String deptId;
    /** 姓名 */
    @Size(max = 10, min = 2, message = "姓名在2-10位")
    @NotBlank(message="姓名不能为空")
    @Column(name = "name", length = 80, nullable = false)
    private String name;
    /** 性别 */
    @Dictionary(dictField = "gender")
    @Column(name = "gender", length = 10)
    private String gender;
    /** 用户名 */
    @Size(max = 30, min = 5, message = "用户名在5-30位")
    @NotBlank(message="用户名不能为空")
    @Column(name = "user_id", length = 80, nullable = false, unique = true)
    private String userId;
    /** 手机 */
    @Pattern(regexp = "(^$)|(^1[3|5|7|8|9|][0-9]{9})", message = "手机号不合法")
    @Column(name = "mobile", length = 20)
    private String mobile;
    @Max(value = 99, message = "排序必须小于99")
    @Column(name = "sort", length = 2)
    private Integer sort;
    @Column(name = "enable", length = 1)
    private Integer enable = 1;

    @Transient
    private Role role;

    @Transient
    private Boolean admin;

    @Transient
    private AuthorizationInfo authorizationInfo;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "dept_id", insertable = false, updatable = false)
    private Department department;

    /** 用户所有角色 */
    @JsonIgnore
    @ManyToMany(fetch = FetchType.LAZY)
    @Fetch(value = FetchMode.SUBSELECT)
    @JoinTable(name = "user_in_role",
        joinColumns = {
            @JoinColumn(name = "user_id")
        },
        inverseJoinColumns = {
            @JoinColumn(name = "role_id")
        }
    )
    private List<Role> roleList = new ArrayList<>();

    /** 用户关联部门 */
    @JsonIgnore
    @ManyToMany(fetch = FetchType.LAZY)
    @Fetch(value = FetchMode.SUBSELECT)
    @JoinTable(name = "user_in_dept", joinColumns = {
            @JoinColumn(name = "user_id")
    }, inverseJoinColumns = {
            @JoinColumn(name = "dept_id")
    })
    private List<Department> deptList = new ArrayList<>();

    @Column(name = "password_error_times", length = 2)
    private Integer passwordErrorTimes;

    @Column(name = "last_error_time")
    private Date lastPasswordErrorTime;

    @Column(name = "last_change_pwd_time")
    private Date lastChangePwdTime;

    public Date getLastChangePwdTime() {
        return lastChangePwdTime;
    }

    public void setLastChangePwdTime(Date lastChangePwdTime) {
        this.lastChangePwdTime = lastChangePwdTime;
    }

    public User(){
        // Default constructor
    }

    public User(String userId){
        this.userId = userId;
    }

    public User(String userId, String password){
        this.userId = userId;
        this.password = password;
    }

    public User(String id, String email, String name, String gender, String userId, String mobile, Integer enable) {
        this.id = id;
        this.email = email;
        this.name = name;
        this.gender = gender;
        this.userId = userId;
        this.mobile = mobile;
        this.enable = enable;
    }

    @Override
    public void setPassword(String password){
        this.password = password;
    }

    @Override
    public String getPassword(){
        return this.password;
    }
    public void setBirthday(Date birthday){
        this.birthday = birthday;
    }

    public Date getBirthday(){
        return this.birthday;
    }
    public void setEmail(String email){
        this.email = email;
    }

    public String getEmail(){
        return this.email;
    }
    public void setDeptId(String deptId){
        this.deptId = deptId;
    }

    public String getDeptId(){
        return this.deptId;
    }
    public void setName(String name){
        this.name = name;
    }

    public String getName(){
        return this.name;
    }
    public void setGender(String gender){
        this.gender = gender;
    }

    public String getGender(){
        return this.gender;
    }

    @Override
    public void setUserId(String userId){
        this.userId = userId;
    }

    @Override
    public String getUserId(){
        return this.userId;
    }
    public void setMobile(String mobile){
        this.mobile = mobile;
    }

    public String getMobile(){
        return this.mobile;
    }

    public Department getDepartment() {
        return department;
    }

    public void setDepartment(Department department) {
        this.department = department;
    }

    @Override
    public List<Department> getDeptList() {
        return deptList;
    }

    @Override
    public void setDeptList(List<Department> deptList) {
        this.deptList = deptList;
    }

    public Integer getSort() {
        return sort;
    }

    public void setSort(Integer sort) {
        this.sort = sort;
    }

    @Override
    public List<Role> getRoleList() {
        return roleList;
    }

    @Override
    public void setRoleList(List<Role> roleList) {
        this.roleList = roleList;
    }

    @Override
    public Boolean isAdmin() {
        if(admin==null)
            admin = false;
        return getAdmin();
    }

    public Boolean getAdmin() {
        return admin;
    }

    @Override
    public AuthorizationInfo getAuthorizationInfo() {
        return authorizationInfo;
    }

    public void setAdmin(Boolean admin) {
        this.admin = admin;
    }

    @Override
    public void setAuthorizationInfo(AuthorizationInfo authorizationInfo) {
        this.authorizationInfo = authorizationInfo;
    }

    public Integer getPasswordErrorTimes() {
        return passwordErrorTimes;
    }

    public void setPasswordErrorTimes(Integer passwordErrorTimes) {
        this.passwordErrorTimes = passwordErrorTimes;
    }

    public Date getLastPasswordErrorTime() {
        return lastPasswordErrorTime;
    }

    public void setLastPasswordErrorTime(Date lastPasswordErrorTime) {
        this.lastPasswordErrorTime = lastPasswordErrorTime;
    }

    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    public Integer getEnable() {
        return enable;
    }

    public void setEnable(Integer enable) {
        this.enable = enable;
    }

    @Override
    public boolean equals(Object obj){
        if(obj instanceof User){
            User user = (User)obj;
            if(id != null)
                return getId().equals(user.getId());
            else
                return super.equals(obj);
        }else
            return false;
    }

    @Override
    public int hashCode(){
        if(StringUtils.isNotBlank(id))
            return id.hashCode();
        else
            return super.hashCode();
    }
}