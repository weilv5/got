package com.jsict.biz.dao.impl;

import com.jsict.biz.dao.MultiCodeValueDao;
import com.jsict.biz.model.MultiCode;
import com.jsict.biz.model.MultiCodeValue;
import com.jsict.biz.service.MultiCodeService;
import com.jsict.biz.service.MultiCodeValueService;
import com.jsict.framework.core.dao.hibernate.GenericHibernateDaoImpl;
import com.jsict.framework.core.model.IDataDictionary;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Auto-Generated by UDP Generator
 * 实现 DictionaryDao接口
 */
@Repository
public class MultiCodeValueDaoImpl extends GenericHibernateDaoImpl<MultiCodeValue, String>
        implements MultiCodeValueDao {
    private static final String KEY = "key";
    private static final String VALUE = "value";
    @Autowired
    private MultiCodeService multiCodeService;

    @Autowired
    private MultiCode multiCode;

    @Autowired
    private MultiCodeValue multiCodeValue;
    @Autowired
    private MultiCodeValueService multiCodeValueService;

    @CacheEvict(value = "dataDictionaryCache", allEntries = true)
    @Override
    public MultiCodeValue update(MultiCodeValue multiCodeValue) {
        return super.update(multiCodeValue);
    }

    @CacheEvict(value = "dataDictionaryCache", allEntries = true)
    @Override
    public MultiCodeValue save(MultiCodeValue multiCodeValue) {
        return super.save(multiCodeValue);
    }

    @CacheEvict(value = "dataDictionaryCache", allEntries = true)
    @Override
    public boolean delete(MultiCodeValue multiCodeValue) {
        return super.delete(multiCodeValue);
    }

    @CacheEvict(value = "dataDictionaryCache", allEntries = true)
    @Override
    public boolean deleteById(String id) {
        return super.deleteById(id);
    }

    @Cacheable(value = "dataDictionaryCache")
    @Override
    public List<IDataDictionary> getDataDictionary(String category) {
        Map<String, Object> params = new HashMap<>();
        params.put("codeId", category);
        params.put("delFlag", 0);
        MultiCodeValue multiCodeValue = this.getByProperty(params);
        JSONArray jsonArray = new JSONArray(multiCodeValue);
        List<IDataDictionary> list = new ArrayList<>();
        int length = jsonArray.length();
        for (int i = 0; i < length; i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            MultiCodeValueDaoImpl.Dictionary dictionary = new MultiCodeValueDaoImpl.Dictionary();
            dictionary.setCode(jsonObject.getString(KEY));
            dictionary.setText(jsonObject.getString(VALUE));
            list.add(dictionary);
        }
        return list;
    }

    @Cacheable(value = "dataDictionaryCache")
    @Override
    public IDataDictionary getDataDictionaryByCode(String category, String code) {
        multiCode.setCodeName(category);
        List<MultiCode> multiCodeLists = multiCodeService.find(multiCode);
        for (MultiCode multiCodeList : multiCodeLists) {
            String codeId = multiCodeList.getId();
            multiCodeValue.setCodeId(codeId);
            List<MultiCodeValue> multiCodeValueLists = multiCodeValueService.find(multiCodeValue);
            for (MultiCodeValue multiCodeValueList : multiCodeValueLists) {
                if (code.equals(multiCodeValueList.getItemValue())) {
                    MultiCodeValueDaoImpl.Dictionary dictionary = new MultiCodeValueDaoImpl.Dictionary();
                    dictionary.setCode(multiCodeValueList.getItemValue());
                    dictionary.setText(multiCodeValueList.getCodeName());
                    return dictionary;
                }
            }
        }
        return null;
    }

    @Cacheable(value = "dataDictionaryCache")
    @Override
    public List<IDataDictionary> getDataDictionary(String dictTable, String dictCode, String dictText) {
        StringBuilder sb = new StringBuilder("select ");
        sb.append(dictCode);
        sb.append(", ");
        sb.append(dictText);
        sb.append(" from ");
        sb.append(dictTable);
        sb.append(" where delFlag = 0");
        Map<String, Object> params = new HashMap<>();
        List<Map> results = this.getListBySql(sb.toString(), params);
        List<IDataDictionary> list = new ArrayList<>();
        for (Map result : results) {
            MultiCodeValueDaoImpl.Dictionary dictionary = new MultiCodeValueDaoImpl.Dictionary();
            dictionary.setCode(dictCode);
            dictionary.setText(result.get(dictCode).toString());
            list.add(dictionary);
        }
        return list;
    }

    class Dictionary implements IDataDictionary {

        private String code;

        private String text;

        @Override
        public void setCode(String code) {
            this.code = code;
        }

        @Override
        public String getCode() {
            return code;
        }

        @Override
        public void setText(String text) {
            this.text = text;
        }

        @Override
        public String getText() {
            return text;
        }
    }
}
