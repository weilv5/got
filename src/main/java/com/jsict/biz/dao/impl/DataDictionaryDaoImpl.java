package com.jsict.biz.dao.impl;

import com.jsict.framework.core.dao.DictionaryDao;
import com.jsict.framework.core.model.IDataDictionary;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Repository;
import com.jsict.framework.core.dao.hibernate.GenericHibernateDaoImpl;
import com.jsict.biz.dao.DataDictionaryDao;
import com.jsict.biz.model.DataDictionary;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
* Auto-Generated by UDP Generator
*/
@Repository
public class DataDictionaryDaoImpl extends GenericHibernateDaoImpl<DataDictionary, String>
        implements DataDictionaryDao, DictionaryDao {

    private static final String KEY = "key";
    private static final String VALUE = "value";

    @CacheEvict(value="dataDictionaryCache", allEntries = true)
    @Override
    public DataDictionary update(DataDictionary dataDictionary){
        return super.update(dataDictionary);
    }

    @CacheEvict(value="dataDictionaryCache", allEntries = true)
    @Override
    public DataDictionary save(DataDictionary dataDictionary){
        return super.save(dataDictionary);
    }

    @CacheEvict(value="dataDictionaryCache", allEntries = true)
    @Override
    public boolean delete(DataDictionary dataDictionary){
        return super.delete(dataDictionary);
    }

    @CacheEvict(value="dataDictionaryCache", allEntries = true)
    @Override
    public boolean deleteById(String id){
        return super.deleteById(id);
    }

    @Cacheable(value="dataDictionaryCache")
    @Override
    public List<IDataDictionary> getDataDictionary(String category) {
        Map<String, Object> params = new HashMap<>();
        params.put("dictionaryCode", category);
        params.put("delFlag", 0);
        DataDictionary dataDictionary = this.getByProperty(params);
        JSONArray jsonArray = new JSONArray(dataDictionary.getContent());
        List<IDataDictionary> list = new ArrayList<>();
        int length = jsonArray.length();
        for(int i = 0; i < length; i++){
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            Dictionary dictionary = new Dictionary();
            dictionary.setCode(jsonObject.getString(KEY));
            dictionary.setText(jsonObject.getString(VALUE));
            list.add(dictionary);
        }
        return list;
    }

    @Cacheable(value="dataDictionaryCache")
    @Override
    public IDataDictionary getDataDictionaryByCode(String category, String code) {
        Map<String, Object> params = new HashMap<>();
        params.put("dictionaryCode", category);
        DataDictionary dataDictionary = this.getByProperty(params);
        JSONArray jsonArray = new JSONArray(dataDictionary.getContent());
        int length = jsonArray.length();
        for(int i = 0; i < length; i++){
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            if(code.equals(jsonObject.getString(KEY))){
                Dictionary dictionary = new Dictionary();
                dictionary.setCode(jsonObject.getString(KEY));
                dictionary.setText(jsonObject.getString(VALUE));
                return dictionary;
            }
        }
        return null;
    }

    @Cacheable(value="dataDictionaryCache")
    @Override
    public List<IDataDictionary> getDataDictionary(String dictTable, String dictCode, String dictText) {
        StringBuilder sb = new StringBuilder("select ");
        sb.append(dictCode);
        sb.append(", ");
        sb.append(dictText);
        sb.append(" from ");
        sb.append(dictTable);
        sb.append(" where delFlag = 0");
        Map<String, Object> params = new HashMap<>();
        List<Map> results = this.getListBySql(sb.toString(), params);
        List<IDataDictionary> list = new ArrayList<>();
        for(Map result: results){
            Dictionary dictionary = new Dictionary();
            dictionary.setCode(dictCode);
            dictionary.setText(result.get(dictCode).toString());
            list.add(dictionary);
        }
        return list;
    }

    class Dictionary implements IDataDictionary{

        private String code;

        private String text;

        @Override
        public void setCode(String code) {
            this.code = code;
        }

        @Override
        public String getCode() {
            return code;
        }

        @Override
        public void setText(String text) {
            this.text = text;
        }

        @Override
        public String getText() {
            return text;
        }
    }
}
