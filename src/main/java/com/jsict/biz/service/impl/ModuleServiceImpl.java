package com.jsict.biz.service.impl;

import com.jsict.biz.model.Module;
import com.jsict.biz.model.Role;
import com.jsict.biz.model.TreeNode;
import com.jsict.biz.model.TreeNodeState;
import com.jsict.biz.service.CodeService;
import com.jsict.biz.service.ModuleService;
import com.jsict.framework.core.security.UdpShiroFilterFactoryBean;
import com.jsict.framework.core.service.impl.GeneriServiceImpl;
import com.jsict.framework.utils.SpringContextUtil;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Auto-Generated by UDP Generator
 */
@Service
public class ModuleServiceImpl extends GeneriServiceImpl<Module, String> implements ModuleService {

    private static final String SHIRO_FILTER = "shiroFilter";

//    private static final Comparator ModuleCompare = new Comparator<Module>(){
//        @Override
//        public int compare(Module module1, Module module2) {
//            if(module1.getSortSq()==null && module2.getSortSq()!=null)
//                return -1;
//            else if(module1.getSortSq()!=null && module2.getSortSq()==null){
//                return 1;
//            }else if(module1.getSortSq()==null && module2.getSortSq()==null){
//                return 0;
//            }else{
//                return module1.getSortSq() - module2.getSortSq();
//            }
//        }
//    };

    @Autowired
    private CodeService codeService;

    @Transactional(readOnly = true)
    @Override
    public List<Module> findAll() {
        Map<String, Object> params = new HashMap<>();
        params.put("delFlag", 0);
        return genericDao.findByProperty(params);
    }

    @Transactional
    @CacheEvict(value = "moduleCache", allEntries = true)
    @Override
    public boolean delete(Module module) {
        Module parentmodule = null;
        if (null != module.getParentModuleId())
            parentmodule = genericDao.getById(module.getParentModuleId());
        Boolean b = super.delete(module);
        if (null != parentmodule) {
            parentmodule.setHasChild(parentmodule.getHasChild() - 1);
            super.update(parentmodule);
        }
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return b;
    }

    /**
     * 自动生成模块编码
     *
     * @param module
     * @return
     */
    @Transactional
    @CacheEvict(value = "moduleCache", allEntries = true)
    @Override
    public Module save(Module module) {
        String moduleCode;
        Module parentModule = null;
        if (StringUtils.isBlank(module.getParentModuleId())) {
            moduleCode = codeService.generateCode("M");
            module.setParentModuleId(null);
        } else {
            parentModule = get(module.getParentModuleId());
            moduleCode = codeService.generateCode(parentModule.getModuleCode());

        }
        module.setModuleCode(moduleCode);
        module.setHasChild(0);
        module.setParentModule(parentModule);
        Module m = super.save(module);
        if (null != parentModule) {
            parentModule = genericDao.getById(m.getParentModuleId());
            parentModule.setHasChild(parentModule.getHasChild() + 1);
            super.update(parentModule);
        }

        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return m;
    }

    /**
     * 保存模块前先判断层级是否变化，如果变化了需要把子层模块的层级也变了
     *
     * @param module
     * @return
     */
    @Transactional
    @CacheEvict(value = "moduleCache", allEntries = true)
    @Override
    public Module update(Module module) {
        if (StringUtils.isBlank(module.getParentModuleId()) || "root".equals(module.getParentModuleId()))
            module.setParentModuleId(null);
        Module oldModule = get(module.getId());
        boolean isChanged = true;
        if ((StringUtils.isBlank(oldModule.getParentModuleId()) && StringUtils.isBlank(module.getParentModuleId())) ||
                (StringUtils.isNotBlank(oldModule.getParentModuleId()) && oldModule.getParentModuleId().equals(module.getParentModuleId())))
            isChanged = false;
        if (isChanged) {
            String oldParentModuleId = oldModule.getParentModuleId();
            if (null != oldParentModuleId) {
                Module oldParentModule = get(oldParentModuleId);
                oldParentModule.setHasChild(oldParentModule.getHasChild() - 1);
                super.update(oldParentModule);
            }
            String parentModuleId = module.getParentModuleId();
            if(parentModuleId != null) {
                Module parentModule = get(parentModuleId);
                parentModule.setHasChild(parentModule.getHasChild() + 1);
                super.update(parentModule);
                String moduleCode = codeService.generateCode(parentModule.getModuleCode());
                module.setModuleCode(moduleCode);
                String moduleId = module.getId();
                updateModuleCode(moduleId, moduleCode);
            }else {
                String moduleCode = codeService.generateCode("M");
                module.setModuleCode(moduleCode);
                String moduleId = module.getId();
                updateModuleCode(moduleId, moduleCode);
            }
        }
        Module dbModule = get(module.getId());
        dbModule.setIsPublic(module.getIsPublic());
        dbModule.setParentModuleId(module.getParentModuleId());
        dbModule.setIconAddr(module.getIconAddr());
        dbModule.setIsVisible(module.getIsVisible());
        dbModule.setModuleAddr(module.getModuleAddr());
        dbModule.setModuleCode(module.getModuleCode());
        dbModule.setModuleName(module.getModuleName());
        dbModule.setSortSq(module.getSortSq());
        dbModule.setStick(module.getStick());
        dbModule.setTarget(module.getTarget());
        dbModule.setUpdaterId(module.getUpdaterId());
        Module m = super.update(dbModule);
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return m;
    }

    /**
     * 更新模块编码
     *
     * @param parentModuleId
     * @param parentModuleCode
     */
    private void updateModuleCode(String parentModuleId, String parentModuleCode) {
        Map<String, Object> params = new HashMap<>();
        params.put("parentModuleId", parentModuleId);
        params.put("delFlag", 0);
        List<Module> childModules = genericDao.find("selectByPage", params);
        if (childModules.isEmpty())
            return;
        for (Module childModule : childModules) {
            String newModuleCode = codeService.generateCode(parentModuleCode);
            childModule.setModuleCode(newModuleCode);
            update(childModule);
            updateModuleCode(childModule.getId(), newModuleCode);
        }
    }

    @Cacheable(value = "moduleCache")
    @Transactional(readOnly = true)
    @Override
    public TreeNode getModuleFullTreeForRole(boolean isAdmin, String parentRoleId, String roleId) {
        TreeNode root = new TreeNode();
        root.setText("模块");
        TreeNodeState stat = new TreeNodeState();
        stat.setExpanded(true);
        getChildModuleForRole(isAdmin, parentRoleId, roleId, root);
        return root;
    }

    @Cacheable(value = "moduleCache")
    @Transactional(readOnly = true)
    public List<Module> getModuleFullTreeByUser(boolean isAdmin, List<Role> roles, Module parentModule) {
        List<Module> moduleList = null;
        String parentModuleId = null;
        HashMap params = new HashMap<String, Object>();
        if (null != parentModule && StringUtils.isNotBlank(parentModule.getId())) {
            parentModuleId = parentModule.getId();
            params.put("parentModuleId", parentModuleId);
        }
        if (isAdmin) {
            moduleList = find(parentModuleId);
        } else {
            moduleList = findByRoles(params, roles);
        }
        if (null == moduleList || moduleList.isEmpty())
            return moduleList;
        for (Module module : moduleList) {
            List<Module> childList = getModuleFullTreeByUser(isAdmin, roles, module);
            module.setChildList(childList);
        }
        return moduleList;
    }


    private void getChildModuleForRole(boolean isAdmin, String parentRoleId, String roleId, TreeNode parentNode) {

        List<Module> moduleList = find(parentNode.getModuleId());

        if (moduleList.isEmpty())
            return;
        for (Module module : moduleList) {
            TreeNode treeNode = new TreeNode();
            treeNode.setText(module.getModuleName());
            treeNode.setModuleId(module.getId());
            List<Role> roles = module.getRoleList();
            TreeNodeState state = createTreeNodeState(roleId, parentRoleId, isAdmin, roles);
            treeNode.setChecked(state.getChecked());
            treeNode.setOpen(state.getExpanded());
            if ((isAdmin && StringUtils.isBlank(parentRoleId)) || (module.getIsPublic() != null && module.getIsPublic() == 1))
                state.setDisabled(false);
            treeNode.setState(state);
            List<TreeNode> nodes = parentNode.getNodes();
            if (nodes == null)
                nodes = new ArrayList<>();
            nodes.add(treeNode);
            parentNode.setNodes(nodes);
            getChildModuleForRole(isAdmin, parentRoleId, roleId, treeNode);
        }
    }


    private TreeNodeState createTreeNodeState(String roleId, String parentRoleId, Boolean isAdmin, List<Role> roles) {
        TreeNodeState state = new TreeNodeState();
        for (Role role : roles) {
            if (role.getId().equals(roleId)) {
                state.setChecked(true);
                state.setDisabled(false);
                break;
            } else if ((parentRoleId == null && isAdmin) || role.getId().equals(parentRoleId)) {
                state.setChecked(false);
                state.setDisabled(false);
            }
        }
        return state;
    }

    private List<Module> find(String parentModuleId) {
        Map<String, Object> params = new HashMap<>();
		params.put("isVisible", 1);
        if (StringUtils.isNotBlank(parentModuleId))
            params.put("parentModuleId", parentModuleId);
        params.put("delFlag", 0);
		
        return genericDao.find("queryAllProperties", params);
    }

    @Transactional(readOnly = true)
    @Override
    public List<Module> findByRoles(Map<String, Object> params, List<Role> roles) {
        params.put("isVisible", 1);
        params.put("delFlag", 0);
        List<String> roleList = new ArrayList<>();
        for (Role role : roles) {
            roleList.add(role.getId());
        }
        if (roleList.size() > 0)
            params.put("roleList", roleList);
        return genericDao.find("queryByRoles", params);
    }

    @Transactional(readOnly = true)
    @Override
    public List<Module> findAllByRoles(Map<String, Object> params, List<Role> roles) {
        params.put("isVisible", 1);
        params.put("delFlag", 0);
        List<String> roleList = new ArrayList<>();
        for (Role role : roles) {
            roleList.add(role.getId());
        }
        if (roleList.size() > 0)
            params.put("roleList", roleList);
        return genericDao.find("queryAllByRoles", params);
    }

    @Transactional(readOnly = true)
    public List<Module> findByRoleList(Map<String, Object> params, List<String> roleList) {
        params.put("isVisible", 1);
        params.put("roleList", roleList);
        params.put("delFlag", 0);
        return genericDao.find("queryByRoles", params);
    }

    @Transactional(readOnly = true)
    @Override
    public List<TreeNode> getModuleTreeForRole(boolean isAdmin, Role role) {
        List<TreeNode> nodes = new ArrayList<>();
        List<Role> roles = new ArrayList<>();
        if (null != role.getParentRole())
            roles.add(role.getParentRole());
        List<Module> moduleList;
        if(roles.size()>0)
            moduleList = findAllByRoles(new HashMap<>(), roles);
        else
            moduleList = findAll();
        if (moduleList.isEmpty())
            return nodes;
        for (Module module : moduleList) {
            TreeNode treeNode = new TreeNode();
            treeNode.setText(module.getModuleName());
            treeNode.setModuleId(module.getId());
            treeNode.setPid(module.getParentModuleId());
            List<Role> hasRoles = module.getRoleList();
            TreeNodeState state = createTreeNodeState(role.getId(), role.getParentRoleId(), isAdmin, hasRoles);
            treeNode.setChecked(state.getChecked());
            treeNode.setOpen(true);
            treeNode.setState(state);
            nodes.add(treeNode);
        }
        return nodes;
    }
}
