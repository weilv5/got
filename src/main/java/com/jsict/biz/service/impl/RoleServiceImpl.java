package com.jsict.biz.service.impl;

import com.jsict.biz.dao.ModuleDao;
import com.jsict.biz.dao.RoleDao;
import com.jsict.biz.model.Module;
import com.jsict.biz.model.Role;
import com.jsict.biz.service.RoleService;
import com.jsict.framework.core.controller.RestControllerException;
import com.jsict.framework.core.security.UdpShiroFilterFactoryBean;
import com.jsict.framework.core.service.impl.GeneriServiceImpl;
import com.jsict.framework.utils.SpringContextUtil;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Auto-Generated by UDP Generator
 */
@Service
public class RoleServiceImpl extends GeneriServiceImpl<Role, String> implements RoleService {

    private static final String SHIRO_FILTER = "shiroFilter";

    @Autowired
    private ModuleDao moduleDao;

    @Autowired
    private RoleDao roleDao;

    /**
     *
     * @param id  主键
     * @return  角色实体类
     */
    @Override
    @Transactional(readOnly = true)
    public Role get(String id){
        Role role = super.get(id);
        if(StringUtils.isNotBlank(role.getParentRoleId())){
            Role parentRole = get(role.getParentRoleId());
            role.setParentRole(parentRole);
        }
        return role;
    }

    @Override
    @Transactional
    public Role save(Role role){
        Role query = new Role();
        query.setRoleName(role.getRoleName());
        Role r1 = singleResult(query);
        if(r1!=null)
            throw new RestControllerException("角色名称不能重复");
        Role r = super.save(role);
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return r;
    }

    @Override
    @Transactional
    public Role update(Role role){
        Role dbRole = get(role.getId());
        dbRole.setAdmin(role.getAdmin());
        dbRole.setDelFlag(0);
        dbRole.setBackup(role.getBackup());
        dbRole.setUserList(role.getUserList());
        if(StringUtils.isNotBlank(role.getParentRoleId()) && !"root".equals(role.getParentRoleId()))
            dbRole.setParentRoleId(role.getParentRoleId());
        dbRole.setSort(role.getSort());
        dbRole.setRoleName(role.getRoleName());
        Role r = super.update(dbRole);
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return r;
    }

    @Override
    @Transactional
    public boolean delete(Role role){
        Boolean b = super.delete(role);
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return b;
    }

    @CacheEvict(value="moduleCache", allEntries = true)
    @Transactional
    @Override
    public void saveModuleRole(List<String> moduleIds, String roleId) {
        Role role = get(roleId);
        List<Module> moduleList = new ArrayList<>();
        for(String id: moduleIds){
            Module module = moduleDao.getById(id);
            moduleList.add(module);
        }
        role.setModuleList(moduleList);
        update(role);
    }

    @Override
    public List<Role> selectAll() {
        Map<String, Object> params = new HashMap<>();
        params.put("delFlag", 0);
        return genericDao.findByProperty(params);
    }

}
