package com.jsict.biz.service.impl;

import com.jsict.biz.model.MultiCodeValue;
import com.jsict.biz.service.CodeService;
import com.jsict.biz.service.MultiCodeValueService;
import com.jsict.framework.core.security.UdpShiroFilterFactoryBean;
import com.jsict.framework.core.service.impl.GeneriServiceImpl;
import com.jsict.framework.utils.SpringContextUtil;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Auto-Generated by UDP Generator
 */
@Service
public class MultiCodeValueServiceImpl extends GeneriServiceImpl<MultiCodeValue, String> implements MultiCodeValueService {

    private static final String SHIRO_FILTER = "shiroFilter";
    @Autowired
    private CodeService codeService;

    @Transactional(readOnly = true)
    @Override
    public List<MultiCodeValue> findAll() {
        Map<String, Object> params = new HashMap<>();
        params.put("delFlag", 0);
        return genericDao.findByProperty(params);
    }

    @Transactional(readOnly = true)
    @Override
    public MultiCodeValue get(String id) {
        return super.get(id);
    }

    @Transactional
    @Override
    public String getCode(MultiCodeValue multiCodeValue) {
        String itemCode;
        MultiCodeValue parentValue = null;
        if (StringUtils.isBlank(multiCodeValue.getParentItemId())) {
            itemCode = codeService.generateCode("I");
            multiCodeValue.setParentItemId(null);
        } else {
            parentValue = get(multiCodeValue.getParentItemId());
            if (parentValue != null) {
                if (parentValue.getChildNum() == null) {
                    parentValue.setChildNum(0);
                }
                if (parentValue.getParentItemId() == "") {
                    parentValue.setParentItemId(null);
                }
                itemCode = codeService.generateCode(parentValue.getItemCode());
            } else {
                itemCode = codeService.generateCode("I");
                multiCodeValue.setParentItemId(null);
            }
        }
        return itemCode;
    }

    /**
     * 自动生成字典编码
     *
     * @param multiCodeValue
     * @return
     */
    @Transactional
    @Override
    public MultiCodeValue save(MultiCodeValue multiCodeValue) {
        String itemCode;
        MultiCodeValue parentValue = null;
        if (StringUtils.isBlank(multiCodeValue.getParentItemId())) {
            itemCode = codeService.generateCode("I");
            multiCodeValue.setParentItemId(null);
        } else {
            parentValue = get(multiCodeValue.getParentItemId());
            if (parentValue != null) {
                if (parentValue.getChildNum() == null) {
                    parentValue.setChildNum(0);
                }
                if (parentValue.getParentItemId() == "") {
                    parentValue.setParentItemId(null);
                }
                itemCode = codeService.generateCode(parentValue.getItemCode());
            } else {
                itemCode = codeService.generateCode("I");
                multiCodeValue.setParentItemId(null);
            }
        }
        multiCodeValue.setItemCode(itemCode);
        multiCodeValue.setChildNum(0);
        multiCodeValue.setParentDict(parentValue);
        MultiCodeValue m = super.save(multiCodeValue);
        if (null != parentValue) {
            parentValue = genericDao.getById(m.getParentItemId());
            parentValue.setChildNum(parentValue.getChildNum() + 1);
            super.update(parentValue);
        }

        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return m;
    }

    /**
     * 保存多维代码前先判断层级是否变化，如果变化了需要把子层多维代码的层级也变了
     *
     * @param multiCodeValue
     * @return
     */
    @Transactional
    @Override
    public MultiCodeValue update(MultiCodeValue multiCodeValue) {
        if (StringUtils.isBlank(multiCodeValue.getParentItemId()) || "root".equals(multiCodeValue.getParentItemId()))
            multiCodeValue.setParentItemId(null);
        MultiCodeValue oldMultiValue = get(multiCodeValue.getId());
        boolean isChanged = true;
        if ((StringUtils.isBlank(oldMultiValue.getParentItemId()) && StringUtils.isBlank(multiCodeValue.getParentItemId())) ||
                (StringUtils.isNotBlank(oldMultiValue.getParentItemId()) && oldMultiValue.getParentItemId().equals(multiCodeValue.getParentItemId())))
            isChanged = false;
        if (isChanged) {
            String oldParentItemId = oldMultiValue.getParentItemId();
            if (null != oldParentItemId) {
                MultiCodeValue oldParentItem = get(oldParentItemId);
                oldParentItem.setChildNum(oldParentItem.getChildNum() - 1);
                super.update(oldParentItem);
            }
            String parentModuleId = multiCodeValue.getParentItemId();
            if (parentModuleId != null) {
                MultiCodeValue parentMulti = get(parentModuleId);
                parentMulti.setChildNum(parentMulti.getChildNum() + 1);
                super.update(parentMulti);
                String moduleCode = codeService.generateCode(parentMulti.getItemCode());
                multiCodeValue.setItemCode(moduleCode);
                String moduleId = multiCodeValue.getId();
                updateItemCode(moduleId, moduleCode);
            } else {
                String moduleCode = codeService.generateCode("I");
                multiCodeValue.setItemCode(moduleCode);
                String moduleId = multiCodeValue.getId();
                updateItemCode(moduleId, moduleCode);
            }
        }
        MultiCodeValue dbMulti = get(multiCodeValue.getId());
        dbMulti.setItemValue(multiCodeValue.getItemValue());
//        dbMulti.setParentItemId(multiCodeValue.getParentItemId());
        dbMulti.setCodeName(multiCodeValue.getCodeName());
//        dbMulti.setComments(multiCodeValue.getComments());
//        dbMulti.s(multiCodeValue.getModuleAddr());
//        dbMulti.setModuleCode(multiCodeValue.getModuleCode());
//        dbMulti.setModuleName(multiCodeValue.getModuleName());
        dbMulti.setSortSq(multiCodeValue.getSortSq());
//        dbMulti.setStick(multiCodeValue.getStick());
//        dbMulti.setTarget(multiCodeValue.getTarget());
//        dbMulti.setUpdaterId(multiCodeValue.getUpdaterId());
        MultiCodeValue m = super.update(dbMulti);
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return m;
    }

    @Transactional
    @Override
    public boolean delete(MultiCodeValue multiCodeValue) {
        MultiCodeValue parentValue = null;
        if (null != multiCodeValue.getParentItemId())
            parentValue = genericDao.getById(multiCodeValue.getParentItemId());
        Boolean b = super.delete(multiCodeValue);
        if (null != parentValue) {
            parentValue.setChildNum(parentValue.getChildNum() - 1);
            super.update(parentValue);
        }
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return b;
    }

    /**
     * 批量删除
     *
     * @param multiCodeValues
     */
    @Transactional
    @Override
    public boolean batchDelete(List<MultiCodeValue> multiCodeValues) {
        Boolean b = super.batchDelete(multiCodeValues);
        MultiCodeValue parentValue = null;
        for (MultiCodeValue multiCodeValue : multiCodeValues) {
            if (null != multiCodeValue.getParentItemId())
                parentValue = genericDao.getById(multiCodeValue.getParentItemId());
            if (null != parentValue) {
                parentValue.setChildNum(parentValue.getChildNum() - 1);
                super.update(parentValue);
            }
        }
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return b;
    }

    @Override
    @Transactional
    public void batchSave(List<MultiCodeValue> multiCodeValues) {
        super.batchSave(multiCodeValues);
        MultiCodeValue parentValue = null;
        for (MultiCodeValue multiCodeValue : multiCodeValues) {
            if (null != multiCodeValue.getParentItemId())
                parentValue = genericDao.getById(multiCodeValue.getParentItemId());
            if (null != parentValue) {
                parentValue.setChildNum(parentValue.getChildNum() + 1);
                super.update(parentValue);
            }
        }
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
    }

    @Transactional
    @Override
    public boolean deleteById(String id) {
        MultiCodeValue parentValue = null;
        if (null != genericDao.getById(id).getParentItemId())
            parentValue = genericDao.getById(genericDao.getById(id).getParentItemId());
        Boolean b = super.deleteById(id);
        if (null != parentValue) {
            parentValue.setChildNum(parentValue.getChildNum() - 1);
            super.update(parentValue);
        }
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return b;
    }


    /**
     * 更新多维代码编码
     *
     * @param parentItemId
     * @param parentItemCode
     */
    private void updateItemCode(String parentItemId, String parentItemCode) {
        Map<String, Object> params = new HashMap<>();
        params.put("parentItemId", parentItemId);
        params.put("delFlag", 0);
        List<MultiCodeValue> childItems = genericDao.find("selectByPage", params);
        if (childItems.isEmpty())
            return;
        for (MultiCodeValue childItem : childItems) {
            String newItemCode = codeService.generateCode(parentItemCode);
            childItem.setItemCode(newItemCode);
            update(childItem);
            updateItemCode(childItem.getId(), newItemCode);
        }
    }

    @Transactional
    @Override
    public List<MultiCodeValue> findByParentItemId(String parentItemId) {
        Map<String, Object> params = new HashMap<>();
        if (StringUtils.isNotBlank(parentItemId))
            params.put("parentItemId", parentItemId);
        params.put("delFlag", 0);
        return genericDao.find("queryProperties", params);
    }

    /**
     * 判断多维代码添加时是否重复
     *
     * @param multiCodeValue
     * @return
     */
    @Transactional
    @Override
    public boolean findValue(MultiCodeValue multiCodeValue) {
        boolean bool = false;
        Map<String, Object> params = new HashMap<>();
        params.put("codeName", multiCodeValue.getCodeName());
        params.put("delFlag", 0);
        params.put("codeId", multiCodeValue.getCodeId());
        if (genericDao.findByProperty(params).isEmpty()) {
            params.clear();
            params.put("itemValue", multiCodeValue.getItemValue());
            params.put("delFlag", 0);
            params.put("codeId", multiCodeValue.getCodeId());
            if (genericDao.findByProperty(params).isEmpty()) {
                bool = true;
            }
        } else
            bool = false;
        UdpShiroFilterFactoryBean.SpringShiroFilter shiroFilter =
                (UdpShiroFilterFactoryBean.SpringShiroFilter) SpringContextUtil.getBean(SHIRO_FILTER);
        shiroFilter.updateFilterChainDefinitionMap();
        return bool;
    }


    @Transactional(readOnly = true)
    @Override
    public List<MultiCodeValue> findValueByCodeId(String codeId) {
        Map<String, Object> params = new HashMap<>();
        params.put("delFlag", 0);
        params.put("codeId", codeId);
        return genericDao.findByProperty(params);
    }

    /**
     * 判断多维代码更新时是否重复
     *
     * @param multiCodeValue
     * @return
     */
    @Transactional
    @Override
    public boolean findByUpdate(MultiCodeValue multiCodeValue) {
        boolean bool = false;
        Map<String, Object> params = new HashMap<>();
        params.put("codeName", multiCodeValue.getCodeName());
        params.put("delFlag", 0);
        params.put("codeId", multiCodeValue.getCodeId());
        List<MultiCodeValue> codeNameList = genericDao.findByProperty(params);
        if (codeNameList.isEmpty()) {
            MultiCodeValue multiCodeValueId = genericDao.getById(multiCodeValue.getId());
            if (multiCodeValueId.getItemValue().equals(multiCodeValue.getItemValue())) {
                bool = true;
            }
        }
        params.clear();
        params.put("itemValue", multiCodeValue.getItemValue());
        params.put("delFlag", 0);
        params.put("codeId", multiCodeValue.getCodeId());
        List<MultiCodeValue> itemValueLists = genericDao.findByProperty(params);
        if (itemValueLists.isEmpty()) {
            MultiCodeValue multiCodeValueId = genericDao.getById(multiCodeValue.getId());
            if (multiCodeValueId.getCodeName().equals(multiCodeValue.getCodeName())) {
                bool = true;
            }
        }
        return bool;
    }

    @Transactional
    @Override
    public boolean updateValue(MultiCodeValue multiCodeValue) {
        boolean bool = false;
        MultiCodeValue multiCodeValueId = genericDao.getById(multiCodeValue.getId());
        if (multiCodeValueId.getCodeName().equals(multiCodeValue.getCodeName()) &&
                multiCodeValueId.getItemValue().equals(multiCodeValue.getItemValue())) {
            bool = true;
        }
        return bool;
    }


}
